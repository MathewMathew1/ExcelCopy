// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


model Post {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    workbooks          Workbook[]
    macros          Macro[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB-compatible primary key
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workbook {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  sheets Sheet[]  // Array of sheets
  authorId  String @db.ObjectId
  author  User                @relation(fields: [authorId], references: [id])
}

model Sheet {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId 
  workbookId String   @db.ObjectId
  workbook   Workbook @relation(fields: [workbookId], references: [id], onDelete: Cascade)
  name       String

  rowCount   Int      // Total number of rows
  colCount   Int      // Total number of columns
  cells   Cell[]   
  charts Chart[]

  @@unique([workbookId, name]) 
}

type Cell {
  rowNum   Int    
  colNum   Int    
  value    String? 
  dataType DataType
}

model Chart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId 
  sheetId    String   @db.ObjectId
  sheet      Sheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  name       String
  type       ChartType
  startRow   Int
  startCol   Int
  endRow     Int
  endCol     Int
  mode       ChartMode 

  anchorRow  Int      
  anchorCol  Int
  width      Int
  height     Int

  createdAt  DateTime @default(now())
}

enum ChartType {
  PIE
  BAR
  LINE
}

enum ChartMode {
  COUNT
  SUM
}


enum DataType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  FORMULA
}


model Macro {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  code        String
  args        MacroArg[]   // Storing an array of embedded objects
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String       @db.ObjectId
  createdBy   User         @relation(fields: [createdById], references: [id])
}

// Embedded type for arguments
type MacroArg {
  name        String
  type        ArgType
  description String
}

enum ArgType {
  STRING 
  NUMBER 
  BOOLEAN 
  DATE
}